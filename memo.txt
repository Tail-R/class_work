----------------------------------------------------------------------
メモ
----------------------------------------------------------------------
盤面の幅と高さをNとし、nsqrtにその平方根を入れる。

盤面matは3次元で管理され、N * N * (N + 1)というサイズをしている。

N + 1である理由は、値が確定している場合先頭（mat[i][j][0]）
に1 ~ Nの値が代入される。そして、mat[i][j][1 ~ N]ではその
マス目における候補が0か1で管理がされており、要素への添字と確定して
いる値が対応している。

mat[i][j][0]
未定 = 0
確定 = 1, 2, 3, ~, N

mat[i][j][1 ~ N]
未定 = 0
除外 = 1

----------------------------------------------------------------------
解く方針
----------------------------------------------------------------------
１：　与えられた盤面を、mat[i][j][0] ~ mat[N - 1][N - 1][0]の二次元配列と
    みなして二重ループで走査する。

２：　もしmat[i][j][0]の値が0ではない（すでに値が確定している。）要素を見つけたら
    次の３つの関数を順に呼び出す。

    h_check()
        確定している値とそのy座標を受け取る。確定している値を避けて水平に、候補を
        除外するようmatの候補管理の領域にチェックを打つ。

    v_check()
        確定している値とそのx座標を受け取る。確定している値を避けて垂直に、候補を
        除外するようmatの候補管理の領域にチェックを打つ。

    sq_check()
        サイズNの盤面は数字がかぶっては行けない√N * √N の正方形 N個に分割できる。
        確定している値とその値が所属する正方形の左上の座標(base_x, base_y)を
        受け取る。確定している値を避けて√N * √N の二重ループで候補を除外するよう
        matの候補管理の領域にチェックを打つ。

３：　上の３つの関数を順に呼び出し終えたら次の関数を呼び出す。
    
    re_init() -> bool
        与えられた盤面を、mat[i][j][0] ~ mat[N - 1][N - 1][0]の二次元配列と
        みなして二重ループで走査する。
        もし、値が未定の要素を見つけたら候補管理領域を読んで、値がわかれば確定した
        値をmat[i][j][0]に代入する。
        戻り地がboolになっている理由はもし新たに確定した値がなければそれ以上新たに
        得られる情報がないのでその時点で解くのを終了する。

